// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"
	request "recommendation-service/internal/module/recommendation/models/request"

	mock "github.com/stretchr/testify/mock"

	response "recommendation-service/internal/module/recommendation/models/response"
)

// Usecases is an autogenerated mock type for the Usecases type
type Usecases struct {
	mock.Mock
}

// GetOnlineTicket provides a mock function with given fields: ctx, regionName
func (_m *Usecases) GetOnlineTicket(ctx context.Context, regionName string) (response.OnlineTicket, error) {
	ret := _m.Called(ctx, regionName)

	var r0 response.OnlineTicket
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (response.OnlineTicket, error)); ok {
		return rf(ctx, regionName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) response.OnlineTicket); ok {
		r0 = rf(ctx, regionName)
	} else {
		r0 = ret.Get(0).(response.OnlineTicket)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, regionName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecommendation provides a mock function with given fields: ctx, userID
func (_m *Usecases) GetRecommendation(ctx context.Context, userID int64) ([]response.Recomendation, error) {
	ret := _m.Called(ctx, userID)

	var r0 []response.Recomendation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]response.Recomendation, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []response.Recomendation); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.Recomendation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTicketSoldOut provides a mock function with given fields: ctx, payload
func (_m *Usecases) UpdateTicketSoldOut(ctx context.Context, payload *request.TicketSoldOut) error {
	ret := _m.Called(ctx, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.TicketSoldOut) error); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateVenueStatus provides a mock function with given fields: ctx, payload
func (_m *Usecases) UpdateVenueStatus(ctx context.Context, payload *request.UpdateVenueStatus) error {
	ret := _m.Called(ctx, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.UpdateVenueStatus) error); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUsecases interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsecases creates a new instance of Usecases. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsecases(t mockConstructorTestingTNewUsecases) *Usecases {
	mock := &Usecases{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
